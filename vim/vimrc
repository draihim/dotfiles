let mapleader = " "
filetype plugin indent on
nnoremap Y y$
syntax on
set noshowmode
set mouse=a
set number
set hidden nobackup nowritebackup
set backspace=indent,eol,start
set hlsearch incsearch
set showcmd " show incomplete commands in the status bar
set history=100
set autoindent "indents using whitespaces
set laststatus=2 " make file status etc. always visible
set cursorline
set smartindent
set ignorecase
set scrolloff=8
set expandtab
set t_Co=256
set clipboard^=unnamed
set listchars=tab:▸\ ,trail:•,extends:❯,precedes:❮
set showbreak=↪\
set splitbelow splitright
set signcolumn=number
set guioptions=
set updatetime=300
" use rg for grepping
set grepprg=rg\ --vimgrep\ --fixed-strings
set guifont=Fira\ Code\ Retina

nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
nnoremap j gj
nnoremap k gk

nnoremap <leader>> <C-W>>
nnoremap <leader>< <C-W><

"remove hanging whitespace
nnoremap <leader>s :%s/\s\+$//e<CR>

" open a new vertical split window with <leader> w
nnoremap <leader>w <C-w>v<C-w>l
nnoremap <leader>v :vnew<CR>

"insert a timestamp in default date format
nnoremap <leader>dt :put =strftime('%c')<CR>

" Simple re-format for minified Javascript
command! UnMinify call UnMinify()
function! UnMinify()
    %s/{\ze[^\r\n]/{\r/g
    %s/){/) {/g
    %s/};\?\ze[^\r\n]/\0\r/g
    %s/;\ze[^\r\n]/;\r/g
    %s/[^\s]\zs[=&|]\+\ze[^\s]/ \0 /g
    normal ggVG=
endfunction

autocmd Filetype gitcommit setlocal spell textwidth=72  " set columns to 72 on git commits

" test fzf mappings
nnoremap <silent> <Leader>/ :Rg<Cr>
nnoremap <c-p> :Files<CR>
nnoremap <silent> <Leader>b :Buffers<Cr>
nnoremap <silent> <Leader>h :History<Cr>
nnoremap <silent> <Leader>l :Lines<Cr>

" coc test
let g:coc_global_extensions = [
\  'coc-css',
\  'coc-eslint',
\  'coc-jedi',
\  'coc-json',
\  'coc-markdownlint',
\  'coc-marketplace',
\  'coc-prettier',
\  'coc-sh',
\  'coc-swagger',
\  'coc-tabnine',
\  'coc-tsserver',
\  'coc-yaml',
\]

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

nnoremap <silent> <leader>f :call CocAction('format')<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Remap <C-f> and <C-b> for scroll float windows/popups.
nnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
inoremap <nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')


augroup filetype_jsx
    autocmd!
    autocmd FileType javascript set filetype=javascriptreact
augroup END

let g:polyglot_disabled = ['javascriptreact']

call plug#begin('~/.vim/plugged')
Plug 'HerringtonDarkholme/yats.vim'
Plug 'Raimondi/delimitMate'
Plug 'bling/vim-airline'
Plug 'christoomey/vim-tmux-navigator'
Plug 'jlanzarotta/bufexplorer'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-slash'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'habamax/vim-asciidoctor'
" Plug 'yuezk/vim-js'
" Plug 'maxmellon/vim-jsx-pretty'
Plug 'sheerun/vim-polyglot'
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }


" colors
Plug 'AlessandroYorba/Alduin'
Plug 'AlessandroYorba/Despacio'
Plug 'fcpg/vim-farout'
Plug 'morhetz/gruvbox'
call plug#end()

" colorschemes!
set bg=dark
colorscheme gruvbox
